name: Run System Tests

on:
  push:
    branches: [ "main", "final-version", "Configure-CI", "hometask-4" ]
  pull_request:
    branches: [ "main", "final-version", "Configure-CI", "hometask-4" ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.14

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  tests:
    needs: [ lint ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2


      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Prepare Logs Directory
        run: |
          mkdir -p ./logs
          sudo chown -R 1000:1000 ./logs

      - name: Create Docker Network
        run: |
          docker network create teamcity-network


      - name: Run TeamCity Server Container
        run: |
          docker run -d --name teamcity-server-instance --network teamcity-network -v ${{ github.workspace }}/logs:/opt/teamcity/logs -p 8111:8111 jetbrains/teamcity-server
          echo "Waiting for TeamCity server to start..."
          for i in {1..30}; do
                  if docker logs teamcity-server-instance 2>&1 | grep -q 'TeamCity process PID is'; then
                    echo "TeamCity server started successfully."
                    break
                  fi
                  echo "Waiting..."
                  sleep 5
                done
                echo "Docker Status:"
                docker ps -a
                echo "TeamCity Server Logs:"
                docker logs teamcity-server-instance

      - name: Check Port Availability
        run: |
          echo "Checking if port 8111 is open..."
          if nc -z localhost 8111; then
            echo "Port 8111 is open."
          else
            echo "Port 8111 is not open."
          fi

      - name: Run TeamCity Agent Container
        run: |
          docker run -d --name teamcity-agent-instance --network teamcity-network -e SERVER_URL="http://teamcity-server-instance:8111" jetbrains/teamcity-agent

      - name: Install Python Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.10 python3-pip
          pip install -r requirements.txt

      - name: Install WOFF2 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y woff2 libwoff-dev
          sudo apt-get install -y libvpx7 libevent-2.1-7 libopus0 libharfbuzz-icu0 libgstreamer-plugins-base1.0-0 libhyphen0

      - name: Run Set Up Test
        run: |
          playwright install
          playwright install-deps
          pytest -v tests/frontend/test_set_up.py

      - name: Retrieve Super User Token
        run: |
          timeout=180 
          while [ $timeout -gt 0 ]; do
            if docker logs teamcity-server-instance 2>&1 | grep -q 'Super user authentication token'; then
              echo "Token found in logs, extracting..."
              token=$(docker logs teamcity-server-instance 2>&1 | grep -oP 'Super user authentication token: \K[0-9]+')
              echo "Super user token: $token"
              echo "SUPER_USER_TOKEN=$token" >> $GITHUB_ENV
              break
            else
              echo "Token not found, waiting..."
              sleep 10 # интервал проверки каждые 10 секунд
              timeout=$((timeout-10))
            fi
          done
          if [ $timeout -le 0 ]; then
            echo "Failed to retrieve super user token within the timeout period."
          fi
        shell: /usr/bin/bash -e {0}

      - name: Start recorder and run tests
        run: |
          mkdir reqover
          docker run -d --network host -v $PWD:/reqover reqover/reqover-cli record -t http://localhost:8111/app/rest/swagger.json
          pytest -v --alluredir=allure-results --reruns 2 --ignore=tests/frontend/test_set_up.py


      - name: Load test report history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Results
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Run reqover
        run: |
          npx reqover generate -f swagger.json -d reqover --html
          mkdir combined-results
          cp -r allure-history/* combined-results/
          cp -r .reqover/coverage.json combined-results/

      - name: Deploy Combined Report to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: combined-results



